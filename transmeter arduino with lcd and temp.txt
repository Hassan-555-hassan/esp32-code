#include <SPI.h>
#include <RF24.h>
#include <Wire.h>
#include <LiquidCrystal_I2C.h>

LiquidCrystal_I2C lcd(0x27, 16, 2);

#define CE_PIN 9
#define CSN_PIN 10
RF24 radio(CE_PIN, CSN_PIN);
const byte address[6] = "00001";

const int ledPin = 6;

const int joy1_x = A7;
const int joy1_y = A6;
const int joy2_x = A1;
const int joy2_y = A2;

const int ntcPin = A0;
const float BETA = 3950;
const float SERIES_RESISTOR = 10000;

unsigned long lastLcdUpdate = 0;
unsigned long lastSendTime = 0;
unsigned long lastTempUpdate = 0;

int lcdState = 0;

const int numSamples = 10;
float tempSamples[numSamples];
int sampleIndex = 0;
bool samplesFilled = false;

float filteredTempC = 0.0;

struct ControlData {
  int joy1_x;
  int joy1_y;
  int joy2_x;
  int joy2_y;
};

void setup() {
  Serial.begin(9600);
  Serial.println("‚è≥ Initializing Transmitter...");

  lcd.init();
  lcd.backlight();

  pinMode(ledPin, OUTPUT);

  if (!radio.begin()) {
    Serial.println("‚ùå NRF24L01 not detected!");
    while (1);
  }

  radio.openWritingPipe(address);
  radio.setChannel(100);
  radio.setPALevel(RF24_PA_LOW);
  radio.setDataRate(RF24_1MBPS);
  radio.stopListening();

  Serial.println("‚úÖ Transmitter Ready");
}

float readTemperatureC() {
  int analogValue = analogRead(ntcPin);
  float voltage = analogValue * 3.3 / 1023.0;
  float resistance = SERIES_RESISTOR * (3.3 / voltage - 1);
  float temperatureK = 1.0 / (1.0 / 298.15 + log(resistance / 15000.0) / BETA);
  float temperatureC = temperatureK - 273.15;
  return temperatureC;
}

float getFilteredTemp() {
  float sum = 0.0;
  for (int i = 0; i < numSamples; i++) {
    sum += tempSamples[i];
  }
  return sum / numSamples;
}

void loop() {
  unsigned long currentTime = millis();

  // ŸÇÿ±ÿßÿ°ÿ© ŸàŸÅŸÑÿ™ÿ±ÿ© ÿØÿ±ÿ¨ÿ© ÿßŸÑÿ≠ÿ±ÿßÿ±ÿ© ŸÉŸÑ 200 ŸÖŸÑŸÑŸä ÿ´ÿßŸÜŸäÿ©
  if (currentTime - lastTempUpdate >= 200) {
    float temp = readTemperatureC();
    tempSamples[sampleIndex] = temp;
    sampleIndex = (sampleIndex + 1) % numSamples;
    if (sampleIndex == 0) samplesFilled = true;

    if (samplesFilled) {
      filteredTempC = getFilteredTemp();
    } else {
      filteredTempC = temp;
    }

    lastTempUpdate = currentTime;
  }

  // ÿ™ÿ≠ÿØŸäÿ´ ÿßŸÑÿ¥ÿßÿ¥ÿ© ŸÉŸÑ 2 ÿ´ÿßŸÜŸäÿ©
  if (currentTime - lastLcdUpdate >= 2000) {
    lcd.setCursor(0, 0);
    lcd.print("                ");  // ŸÖÿ≥ÿ≠ ÿßŸÑÿ≥ÿ∑ÿ± ÿßŸÑÿ£ŸàŸÑ

    if (lcdState == 0) {
      lcd.setCursor(0, 0);
      lcd.print("Hello World");
    } else {
      lcd.setCursor(0, 0);
      lcd.print("Hi Hassan");
    }

    lcdState = 1 - lcdState;
    lastLcdUpdate = currentTime;

    lcd.setCursor(10, 1);
    lcd.print("    ");
    lcd.setCursor(10, 1);
    lcd.print((int)filteredTempC);
    lcd.print((char)223);
    lcd.print("C");
  }

  // ŸÇÿ±ÿßÿ°ÿ© ÿßŸÑŸÇŸäŸÖ ŸÖŸÜ ÿßŸÑÿ¨ŸàŸäÿ≥ÿ™ŸäŸÉ
  int val1_x = analogRead(joy1_x);
  int val1_y = analogRead(joy1_y);
  int val2_x = analogRead(joy2_x);
  int val2_y = analogRead(joy2_y);

  int diff1_x = abs(val1_x - 512);
  int diff1_y = abs(val1_y - 512);
  int diff2_x = abs(val2_x - 512);
  int diff2_y = abs(val2_y - 512);

  int maxDiff = max(max(diff1_x, diff1_y), max(diff2_x, diff2_y));

  if (maxDiff < 20) {
    analogWrite(ledPin, 0);
  } else {
    int pwmValue = map(maxDiff, 20, 512, 0, 255);
    pwmValue = constrain(pwmValue, 0, 255);
    analogWrite(ledPin, pwmValue);
  }

  // ÿ•ÿ±ÿ≥ÿßŸÑ ÿ®ŸäÿßŸÜÿßÿ™ ÿßŸÑÿ¨ŸàŸäÿ≥ÿ™ŸäŸÉ ŸÉŸÑ ÿ´ÿßŸÜŸäÿ©
  if (currentTime - lastSendTime >= 1000) {
    ControlData dataToSend = { val1_x, val1_y, val2_x, val2_y };
    bool success = radio.write(&dataToSend, sizeof(dataToSend));

    if (success) {
      Serial.print("üì§ Sent Joy Data: ");
      Serial.print(val1_x); Serial.print(", ");
      Serial.print(val1_y); Serial.print(", ");
      Serial.print(val2_x); Serial.print(", ");
      Serial.println(val2_y);
    } else {
      Serial.println("‚ùå Send Failed!");
    }

    lastSendTime = currentTime;
  }
}
